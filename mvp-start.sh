#!/bin/bash

# SevenScale MVP - Script de Inicializa√ß√£o
# Execute: chmod +x mvp-start.sh && ./mvp-start.sh

echo "üöÄ Iniciando SevenScale MVP..."
echo "=====================================\n"

# Verificar se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado. Instale Node.js 18+ e tente novamente."
    exit 1
fi

# Verificar se npm est√° instalado
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm n√£o encontrado. Instale npm e tente novamente."
    exit 1
fi

echo "‚úÖ Node.js $(node --version) encontrado"
echo "‚úÖ npm $(npm --version) encontrado\n"

# Verificar se estamos no diret√≥rio correto
if [ ! -d "mvp-backend" ] || [ ! -d "mvp-frontend" ]; then
    echo "‚ùå Diret√≥rios MVP n√£o encontrados. Execute este script na raiz do projeto."
    exit 1
fi

# Fun√ß√£o para verificar se uma porta est√° em uso
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Verificar portas
echo "üîç Verificando portas..."
if check_port 8001; then
    echo "‚ö†Ô∏è  Porta 8001 (backend) j√° est√° em uso"
    read -p "Deseja continuar mesmo assim? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

if check_port 3001; then
    echo "‚ö†Ô∏è  Porta 3001 (frontend) j√° est√° em uso"
    read -p "Deseja continuar mesmo assim? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo "\nüì¶ ETAPA 1: Configurando Backend MVP..."
cd mvp-backend

# Verificar se node_modules existe
if [ ! -d "node_modules" ]; then
    echo "üì• Instalando depend√™ncias do backend..."
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Falha na instala√ß√£o das depend√™ncias do backend"
        exit 1
    fi
else
    echo "‚úÖ Depend√™ncias do backend j√° instaladas"
fi

# Verificar arquivo .env
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  Arquivo .env n√£o encontrado"
    if [ -f ".env.example" ]; then
        echo "üìã Copiando .env.example para .env..."
        cp .env.example .env
        echo "\n‚öôÔ∏è  CONFIGURE SEU .env AGORA:"
        echo "   - SUPABASE_URL=sua-url-supabase"
        echo "   - SUPABASE_ANON_KEY=sua-chave-supabase"
        echo "   - OPENAI_API_KEY=sua-chave-openai"
        echo "\nüìù Editando .env..."
        
        # Abrir editor padr√£o ou nano
        if command -v code &> /dev/null; then
            code .env
        elif command -v nano &> /dev/null; then
            nano .env
        else
            echo "\nüìù Edite o arquivo .env manualmente em: $(pwd)/.env"
        fi
        
        read -p "\nPressione Enter quando terminar de configurar o .env..." -r
    else
        echo "‚ùå Arquivo .env.example n√£o encontrado"
        exit 1
    fi
else
    echo "‚úÖ Arquivo .env encontrado"
fi

echo "\nüé® ETAPA 2: Configurando Frontend MVP..."
cd ../mvp-frontend

# Verificar se node_modules existe
if [ ! -d "node_modules" ]; then
    echo "üì• Instalando depend√™ncias do frontend..."
    npm install
    if [ $? -ne 0 ]; then
        echo "‚ùå Falha na instala√ß√£o das depend√™ncias do frontend"
        exit 1
    fi
else
    echo "‚úÖ Depend√™ncias do frontend j√° instaladas"
fi

# Verificar arquivo .env
if [ ! -f ".env" ]; then
    echo "üìã Criando .env do frontend..."
    if [ -f ".env.example" ]; then
        cp .env.example .env
        echo "‚úÖ Arquivo .env criado para o frontend"
    fi
fi

cd ..

echo "\nüöÄ ETAPA 3: Iniciando Servi√ßos MVP..."
echo "=====================================\n"

# Fun√ß√£o para iniciar backend em background
start_backend() {
    echo "üîß Iniciando backend MVP (porta 8001)..."
    cd mvp-backend
    npm run dev > ../mvp-backend.log 2>&1 &
    BACKEND_PID=$!
    cd ..
    
    # Aguardar backend inicializar
    echo "‚è≥ Aguardando backend inicializar..."
    for i in {1..30}; do
        if curl -s http://localhost:8001/api/mvp/health > /dev/null 2>&1; then
            echo "‚úÖ Backend MVP online!"
            return 0
        fi
        sleep 1
        echo -n "."
    done
    echo "\n‚ùå Backend n√£o conseguiu inicializar em 30 segundos"
    return 1
}

# Fun√ß√£o para iniciar frontend em background
start_frontend() {
    echo "\nüé® Iniciando frontend MVP (porta 3001)..."
    cd mvp-frontend
    npm run dev > ../mvp-frontend.log 2>&1 &
    FRONTEND_PID=$!
    cd ..
    
    # Aguardar frontend inicializar
    echo "‚è≥ Aguardando frontend inicializar..."
    for i in {1..20}; do
        if curl -s http://localhost:3001 > /dev/null 2>&1; then
            echo "‚úÖ Frontend MVP online!"
            return 0
        fi
        sleep 1
        echo -n "."
    done
    echo "\n‚ùå Frontend n√£o conseguiu inicializar em 20 segundos"
    return 1
}

# Iniciar servi√ßos
start_backend
if [ $? -eq 0 ]; then
    start_frontend
    if [ $? -eq 0 ]; then
        echo "\nüéâ MVP SEVENSCALE ONLINE!"
        echo "=====================================\n"
        echo "üîß Backend:  http://localhost:8001"
        echo "üé® Frontend: http://localhost:3001"
        echo "üìä Dashboard: http://localhost:3001/mvp/dashboard"
        echo "\nüìã Health Check:"
        echo "   curl http://localhost:8001/api/mvp/health"
        echo "\nüìù Logs:"
        echo "   Backend:  tail -f mvp-backend.log"
        echo "   Frontend: tail -f mvp-frontend.log"
        echo "\n‚èπÔ∏è  Para parar: Ctrl+C ou kill $BACKEND_PID $FRONTEND_PID"
        echo "\nüéØ Pressione Ctrl+C para parar todos os servi√ßos..."
        
        # Aguardar Ctrl+C
        trap "echo '\nüõë Parando servi√ßos MVP...'; kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; echo '‚úÖ Servi√ßos parados'; exit 0" INT
        
        # Manter script rodando
        while true; do
            sleep 1
        done
    else
        echo "‚ùå Falha ao iniciar frontend"
        kill $BACKEND_PID 2>/dev/null
        exit 1
    fi
else
    echo "‚ùå Falha ao iniciar backend"
    exit 1
fi