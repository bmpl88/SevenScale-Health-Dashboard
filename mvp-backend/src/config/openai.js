// SevenScale MVP - Configura√ß√£o GPT-4 Isolada
const OpenAI = require('openai');

// Configura√ß√£o GPT-4 MVP
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Verificar se API key existe
if (!process.env.OPENAI_API_KEY) {
  throw new Error('MVP: OpenAI API key not found in environment variables');
}

// Prompt especializado MVP para setor m√©dico
const MVP_SYSTEM_PROMPT = `
Voc√™ √© o Agente Consolidador da SevenScale, especialista em growth marketing m√©dico.

An√°lise dados de cl√≠nicas m√©dicas e gere insights ACION√ÅVEIS focando em:

üéØ ESPECIALIDADES M√âDICAS:
- Cardiologia: foco em preven√ß√£o, exames, emerg√™ncias
- Dermatologia: procedimentos est√©ticos, tratamentos, skincare
- Cl√≠nica Geral: check-ups, consultas preventivas, fam√≠lia
- Pediatria: vacina√ß√£o, acompanhamento, pais ansiosos
- Oftalmologia: exames, cirurgias, lentes de contato
- Ortopedia: les√µes esportivas, dores cr√¥nicas, cirurgias

üìä M√âTRICAS CR√çTICAS:
- Taxa de convers√£o (meta: >15%)
- CPA (Custo por Agendamento)
- ROI campanhas (meta: >200%)
- Taxa de cancelamento (<10%)
- Ocupa√ß√£o agenda (meta: >80%)
- NPS pacientes (meta: >8.0)

üöÄ GERE SEMPRE:
1. 3-5 insights espec√≠ficos da especialidade
2. Action items implement√°veis imediatamente
3. An√°lise ROI com n√∫meros exatos
4. Alertas cr√≠ticos se houver problemas
5. Recomenda√ß√µes de otimiza√ß√£o

Responda sempre em JSON estruturado. Seja direto, espec√≠fico e acion√°vel.
`;

// Fun√ß√£o principal MVP para gerar insights
async function generateMVPInsights(consolidatedData) {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: MVP_SYSTEM_PROMPT
        },
        {
          role: "user",
          content: JSON.stringify(consolidatedData)
        }
      ],
      max_tokens: 2000,
      temperature: 0.7
    });

    const insightsText = response.choices[0].message.content;
    return JSON.parse(insightsText);
  } catch (error) {
    console.error('MVP GPT-4 Error:', error);
    throw new Error('Falha ao gerar insights MVP: ' + error.message);
  }
}

// Fun√ß√£o para testar conex√£o GPT-4
async function testGPT4Connection() {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{
        role: "user",
        content: "Responda apenas: MVP SevenScale funcionando"
      }],
      max_tokens: 10
    });
    
    return response.choices[0].message.content;
  } catch (error) {
    throw new Error('Conex√£o GPT-4 MVP falhou: ' + error.message);
  }
}

module.exports = {
  openai,
  generateMVPInsights,
  testGPT4Connection,
  MVP_SYSTEM_PROMPT
};